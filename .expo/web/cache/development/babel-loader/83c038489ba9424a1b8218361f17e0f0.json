{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport LayoutAnimation from \"react-native-web/dist/exports/LayoutAnimation\";\nimport styles from \"./styles\";\nvar UIManager = NativeModules.UIManager;\nUIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\nexport default function TodoHeader() {\n  var _useState = useState(\"new task\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      todo = _useState2[0],\n      setTodo = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      focused = _useState4[0],\n      setFocused = _useState4[1];\n\n  var handleAddTodo = function handleAddTodo() {\n    setTodo(\"\");\n  };\n\n  return React.createElement(View, {\n    style: styles.header\n  }, React.createElement(TextInput, {\n    placeholder: \"Add New Task\",\n    style: _objectSpread(_objectSpread({}, styles.txtInput), focused ? styles.txtInputFoucused : {}),\n    value: todo,\n    onChangeText: function onChangeText(txt) {\n      return setTodo(txt);\n    },\n    onFocus: function onFocus() {\n      LayoutAnimation.easeInEaseOut();\n      setFocused(true);\n    },\n    onBlur: function onBlur() {\n      LayoutAnimation.easeInEaseOut();\n      setFocused(false);\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.btn,\n    onPress: function onPress() {\n      return handleAddTodo();\n    }\n  }, React.createElement(Text, {\n    style: styles.btntxt\n  }, \"ADD\")));\n}","map":{"version":3,"sources":["C:/Users/ayamm/Downloads/iti/React Native/Day1/lab1/Todo/TodoHeader.js"],"names":["React","useState","styles","UIManager","NativeModules","setLayoutAnimationEnabledExperimental","TodoHeader","todo","setTodo","focused","setFocused","handleAddTodo","header","txtInput","txtInputFoucused","txt","LayoutAnimation","easeInEaseOut","btn","btntxt"],"mappings":";;;;;;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;AAEA,OAAOC,MAAP;AACA,IAAQC,SAAR,GAAsBC,aAAtB,CAAQD,SAAR;AACAA,SAAS,CAACE,qCAAV,IACIF,SAAS,CAACE,qCAAV,CAAgD,IAAhD,CADJ;AAGA,eAAe,SAASC,UAAT,GAAsB;AACjC,kBAAwBL,QAAQ,CAAC,UAAD,CAAhC;AAAA;AAAA,MAAOM,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA8BP,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOQ,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBH,IAAAA,OAAO,CAAC,EAAD,CAAP;AACH,GAFD;;AAGA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEN,MAAM,CAACU;AAApB,KACI,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAC,cAAvB;AACI,IAAA,KAAK,kCAAOV,MAAM,CAACW,QAAd,GAA2BJ,OAAO,GAAGP,MAAM,CAACY,gBAAV,GAA6B,EAA/D,CADT;AAEI,IAAA,KAAK,EAAEP,IAFX;AAGI,IAAA,YAAY,EAAE,sBAACQ,GAAD;AAAA,aAASP,OAAO,CAACO,GAAD,CAAhB;AAAA,KAHlB;AAII,IAAA,OAAO,EAAE,mBAAM;AACXC,MAAAA,eAAe,CAACC,aAAhB;AACAP,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH,KAPL;AAQI,IAAA,MAAM,EAAE,kBAAM;AACVM,MAAAA,eAAe,CAACC,aAAhB;AACAP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AAXL,IADJ,EAcI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAER,MAAM,CAACgB,GAAhC;AAAqC,IAAA,OAAO,EAAE;AAAA,aAAMP,aAAa,EAAnB;AAAA;AAA9C,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAET,MAAM,CAACiB;AAApB,WADJ,CAdJ,CADJ;AAsBH","sourcesContent":["\r\nimport React, { useState } from \"react\";\r\nimport { TextInput, TouchableOpacity, View, Text, NativeModules, LayoutAnimation } from \"react-native\";\r\nimport styles from \"./styles\";\r\nconst { UIManager } = NativeModules;\r\nUIManager.setLayoutAnimationEnabledExperimental &&\r\n    UIManager.setLayoutAnimationEnabledExperimental(true);\r\n\r\nexport default function TodoHeader() {\r\n    const [todo, setTodo] = useState(\"new task\");\r\n    const [focused, setFocused] = useState(false);\r\n    const handleAddTodo = () => {\r\n        setTodo(\"\");\r\n    }\r\n    return (\r\n        <View style={styles.header}>\r\n            <TextInput placeholder=\"Add New Task\"\r\n                style={{ ...styles.txtInput,...(focused ? styles.txtInputFoucused : {}) }}\r\n                value={todo}\r\n                onChangeText={(txt) => setTodo(txt)}\r\n                onFocus={() => {\r\n                    LayoutAnimation.easeInEaseOut()\r\n                    setFocused(true)\r\n                }}\r\n                onBlur={() => {\r\n                    LayoutAnimation.easeInEaseOut()\r\n                    setFocused(false)\r\n                }\r\n                }></TextInput>\r\n            <TouchableOpacity style={styles.btn} onPress={() => handleAddTodo()}>\r\n                <Text style={styles.btntxt}>ADD</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n\r\n\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}